<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>docker安装与使用</title>
      <link href="2021/04/10/docker-01/"/>
      <url>2021/04/10/docker-01/</url>
      
        <content type="html"><![CDATA[<hr><p>[toc]</p><h1 id="为什么"><a href="#为什么" class="headerlink" title="为什么"></a>为什么</h1><p>一款产品从开发到上线，从操作系统，到运行环境，再到应用配置。作为开发+运维之间的协作我们需要关心很多东西，这也是很多互联网公司都不得不面对的问题，特别是各种版本的迭代之后，不同版本环境的兼容，对运维人员是极大的考验！环境配置如此麻烦，换一台机器，就要重来一次，费力费时。很多人想到，能不能从根本上解决问题，软件可以带环境安装？也就是说，安装的时候，把原始环境一模一样地复制过来。解决开发人员说的“ 在我的机器上可正常工作”的问题。之前在服务器配置一个应用的运行环境，要安装各种软件，就拿一个基本的工程项目的环境来说吧，Java/Tomcat/MySQL/JDBC驱动包等。安装和配置这些东西有多麻烦就不说了，它还不能跨平台。假如我们是在 Windows 上安装的这些环境，到了 Linux 又得重新装。况且就算不跨操作系统，换另一台同样操作系统的服务器，要移植应用也是非常麻烦的。传统上认为，软件编码开发/测试结束后，所产出的成果即是程序或是能够编译执行的二进制字节码文件等（Java为例）。而为了让这些程序可以顺利执行，开发团队也得准备完整的部署文件，让维运团队得以部署应用程式，开发需要清楚的告诉运维部署团队，用的全部配置文件+所有软件环境。不过，即便如此，仍然常常发生部署失败的状况。Docker之所以发展如此迅速，也是因为它对此给出了一个标准化的解决方案。Docker镜像的设计，使得Docker得以打破过去「程序即应用」的观念。通过Docker镜像 ( images ) 将应用程序所需要的系统环境，由下而上打包，达到应用程序跨平台间的无缝接轨运作。</p><h2 id="docker与vm的对比"><a href="#docker与vm的对比" class="headerlink" title="docker与vm的对比"></a>docker与vm的对比</h2><ul><li>1、docker有着比虚拟机更少的抽象层。由亍docker不需要Hypervisor实现硬件资源虚拟化,运行在docker容器上的程序直接使用的都是实际物理机的硬件资源。因此在CPU、内存利用率上docker将会在效率上有明显优势。</li><li>2、docker利用的是宿主机的内核,而不需要Guest OS。因此,当新建一个容器时,docker不需要和虚拟机一样重新加载一个操作系统内核。仍而避免引寻、加载操作系统内核返个比较费时费资源的过程,当新建一个虚拟机时,虚拟机软件需要加载Guest OS,返个新建过程是分钟级别的。而docker由于直接利用宿主机的操作系统,则省略了返个过程,因此新建一个docker容器只需要几秒钟。<br><img src="/data_img/docker-01/docker_2.png" alt="docker_2" title="docker与vm的区别"><h1 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h1>Docker是基于Go语言实现的云开源项目。<br>Docker的主要目标是“Build，Ship and Run Any App , Anywhere”，也就是通过对应用组件的封装、分发、部署、运行等生命周期的管理，使用户的APP（可以是一个WEB应用或数据库应用等等）及其运行环境能够做到“一次封装，到处运行”。Linux 容器技术的出现就解决了这样一个问题，而 Docker 就是在它的基础上发展过来的。将应用运行在Docker 容器上面，而 Docker 容器在任何操作系统上都是一致的，这就实现了跨平台、跨服务器。只需要一次配置好环境，换到别的机子上就可以一键部署好，大大简化了操作。</li></ul><h2 id="Docker的架构图"><a href="#Docker的架构图" class="headerlink" title="Docker的架构图"></a>Docker的架构图</h2><p><img src="/data_img/docker-01/docker.png" alt="docker" title="docker架构图"></p><h2 id="Docker的基本组成"><a href="#Docker的基本组成" class="headerlink" title="Docker的基本组成"></a>Docker的基本组成</h2><h3 id="镜像（image）"><a href="#镜像（image）" class="headerlink" title="镜像（image）"></a>镜像（image）</h3><p>Docker 镜像（Image）就是一个只读的模板。镜像可以用来创建 Docker 容器，一个镜像可以创建很 多容器。 就好似 Java 中的 类和对象，类就是镜像，容器就是对象！</p><h3 id="容器（container）"><a href="#容器（container）" class="headerlink" title="容器（container）"></a>容器（container）</h3><p>Docker 利用容器（Container）独立运行的一个或一组应用。容器是用镜像创建的运行实例。它可以被启动、开始、停止、删除。每个容器都是相互隔离的，保证安全的平台。可以把容器看做是一个简易版的Linux 环境（包括root用户权限、进程空间、用户空间和网络空间等） 和运行在其中的应用程序。容器的定义和镜像几乎一模一样，也是一堆层的统一视角，唯一区别在于容器的最上面那一层是可读可写的。</p><h3 id="仓库（repository）"><a href="#仓库（repository）" class="headerlink" title="仓库（repository）"></a>仓库（repository）</h3><p>仓库（Repository）是集中存放镜像文件的场所。仓库(Repository)和仓库注册服务器（Registry）是有区别的。仓库注册服务器上往往存放着多个仓库，每个仓库中又包含了多个镜像，每个镜像有不同的标签（tag）。仓库分为公开仓库（Public）和私有仓库（Private）两种形式。最大的公开仓库是 Docker Hub(<a href="https://hub.docker.com/)%EF%BC%8C%E5%AD%98%E6%94%BE%E4%BA%86%E6%95%B0%E9%87%8F%E5%BA%9E%E5%A4%A7%E7%9A%84%E9%95%9C%E5%83%8F%E4%BE%9B%E7%94%A8%E6%88%B7%E4%B8%8B%E8%BD%BD%E3%80%82%E5%9B%BD%E5%86%85%E7%9A%84%E5%85%AC%E5%BC%80%E4%BB%93%E5%BA%93%E5%8C%85%E6%8B%AC%E9%98%BF%E9%87%8C%E4%BA%91%E3%80%81%E7%BD%91%E6%98%93%E4%BA%91%E7%AD%89">https://hub.docker.com/)，存放了数量庞大的镜像供用户下载。国内的公开仓库包括阿里云、网易云等</a></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li>Docker本身是一个容器运行载体或称之为管理引擎。我们把应用程序和配置依赖打包好形成一个可交付的运行环境，这个打包好的运行环境就似乎 image镜像文件。只有通过这个镜像文件才能生成 Docker 容器。image 文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。</li><li>image 文件生成的容器实例，本身也是一个文件，称为镜像文件。</li><li>一个容器运行一种服务，当我们需要的时候，就可以通过docker客户端创建一个对应的运行实例，也就是我们的容器</li><li>至于仓库，就是放了一堆镜像的地方，我们可以把镜像发布到仓库中，需要的时候从仓库中拉下来就可以了。</li></ul><h3 id="Docker是怎么工作的"><a href="#Docker是怎么工作的" class="headerlink" title="Docker是怎么工作的"></a>Docker是怎么工作的</h3><p>Docker是一个Client-Server结构的系统，Docker守护进程运行在主机上， 然后通过Socket连接从客户端访问，守护进程从客户端接受命令并管理运行在主机上的容器。 容器，是一个运行时环境，就是我们前面说到的集装箱。<br><img src="/data_img/docker-01/docker_1.png" alt="docker_1" title="docker架构图"></p><h1 id="怎么用"><a href="#怎么用" class="headerlink" title="怎么用"></a>怎么用</h1><h2 id="环境检查"><a href="#环境检查" class="headerlink" title="环境检查"></a>环境检查</h2><p>此处使用的环境为CentOS 7(64-bit)<br>目前，CentOS 仅发行版本中的内核支持 Docker。<br>Docker 运行在 CentOS 7 上，要求系统为64位、系统内核版本为 3.10 以上。</p><h3 id="查看自己的内核"><a href="#查看自己的内核" class="headerlink" title="查看自己的内核"></a>查看自己的内核</h3><pre class="line-numbers language-none"><code class="language-none">uname -r<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此命令用于打印当前系统相关信息（内核版本号、硬件架构、主机名称和操作系统类型等）。</p><pre class="line-numbers language-none"><code class="language-none">[root@aihys-2 &#x2F;]# uname -r3.10.0-957.el7.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="查看版本信息"><a href="#查看版本信息" class="headerlink" title="查看版本信息"></a>查看版本信息</h3><pre class="line-numbers language-none"><code class="language-none">cat &#x2F;etc&#x2F;os-release<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@aihys-2 &#x2F;]# cat &#x2F;etc&#x2F;os-releaseNAME&#x3D;&quot;CentOS Linux&quot;VERSION&#x3D;&quot;7 (Core)&quot;ID&#x3D;&quot;centos&quot;ID_LIKE&#x3D;&quot;rhel fedora&quot;VERSION_ID&#x3D;&quot;7&quot;PRETTY_NAME&#x3D;&quot;CentOS Linux 7 (Core)&quot;ANSI_COLOR&#x3D;&quot;0;31&quot;CPE_NAME&#x3D;&quot;cpe:&#x2F;o:centos:centos:7&quot;HOME_URL&#x3D;&quot;https:&#x2F;&#x2F;www.centos.org&#x2F;&quot;BUG_REPORT_URL&#x3D;&quot;https:&#x2F;&#x2F;bugs.centos.org&#x2F;&quot;CENTOS_MANTISBT_PROJECT&#x3D;&quot;CentOS-7&quot;CENTOS_MANTISBT_PROJECT_VERSION&#x3D;&quot;7&quot;REDHAT_SUPPORT_PRODUCT&#x3D;&quot;centos&quot;REDHAT_SUPPORT_PRODUCT_VERSION&#x3D;&quot;7&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><blockquote><p>官网安装参考手册：<a href="https://docs.docker.com/engine/install/centos/">https://docs.docker.com/engine/install/centos/</a></p></blockquote><p>1、yum安装gcc相关环境（虚拟机的话需要确保可以连接外网）</p><pre class="line-numbers language-none"><code class="language-none">yum -y install gccyum -y install gcc-c++<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2、卸载旧版本</p><pre class="line-numbers language-none"><code class="language-none">yum remove docker \    docker-client \     docker-client-latest \     docker-common \     docker-latest \     docker-latest-logrotate \     docker-logrotate \     docker-engine<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、安装需要的软件包</p><pre class="line-numbers language-none"><code class="language-none">yum install -y yum-utils<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4、设置镜像仓库<br>官网给出的镜像仓库是国外的地址，国内访问速度会比较慢</p><pre class="line-numbers language-none"><code class="language-none">yum-config-manager --add-repo https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>所以建议使用阿里云的镜像仓库</p><pre class="line-numbers language-none"><code class="language-none">yum-config-manager --add-repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker- ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>5、更新yum软件包索引</p><pre class="line-numbers language-none"><code class="language-none">yum makecache fast<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6、安装Docker CE</p><pre class="line-numbers language-none"><code class="language-none">yum install docker-ce docker-ce-cli containerd.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>7、启动Docker</p><pre class="line-numbers language-none"><code class="language-none">systemctl start docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>8、测试命令</p><pre class="line-numbers language-none"><code class="language-none">#查看docker版本docker version #运行hello-world镜像docker run hello-world#查看镜像docker images<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/data_img/docker-01/hello-world.png" alt="hello-world" title="hello-world镜像信息"><br>9、卸载</p><pre class="line-numbers language-none"><code class="language-none">#停止dockersystemctl stop docker#卸载docker yum -y remove docker-ce docker-ce-cli containerd.io#删除docker目录 rm -rf &#x2F;var&#x2F;lib&#x2F;docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="设置阿里云镜像加速"><a href="#设置阿里云镜像加速" class="headerlink" title="设置阿里云镜像加速"></a>设置阿里云镜像加速</h2><p>我们使用Docker时需要首先下载一个官方镜像，例如mysql、wordpress。然而由于网络原因，下载一个Docker官方镜像可能会需要很长的时间，甚至下载失败。为此，阿里云容器镜像服务ACR提供了官方的镜像站点，从而加速官方镜像的下载</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><blockquote><p>详情请参考<a href="https://www.aliyun.com/product/acr">https://www.aliyun.com/product/acr</a></p></blockquote><p>1、注册一个属于自己的阿里云账户(可复用淘宝账号)<br>2、进入管理控制台设置密码，开通<br><img src="/data_img/docker-01/aliyun_docker_set_01.png" alt="aliyun_docke_set_01" title="阿里云镜像服务1"><br>3、查看镜像加速器<br><img src="/data_img/docker-01/aliyun_docker_set_02.png" alt="aliyun_docke_set_02" title="阿里云镜像服务2"><br>4、配置镜像加速</p><p>针对Docker客户端版本大于 1.10.0 的用户,可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器</p><pre class="line-numbers language-none"><code class="language-none">sudo mkdir -p &#x2F;etc&#x2F;dockersudo tee &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;-&#39;EOF&#39;&#123;  &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;dn8d0o08.mirror.aliyuncs.com&quot;]&#125;EOFsudo systemctl daemon-reloadsudo systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql</title>
      <link href="2021/02/12/mysql/"/>
      <url>2021/02/12/mysql/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux下jdk安装与配置</title>
      <link href="2021/02/12/jdk/"/>
      <url>2021/02/12/jdk/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>作为一个java开发人员，在拥有一台新电脑或者新服务器之后，第一步肯定是要搭建基础的java开发和运行环境，本文针对基础的信息</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> jdk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hadoop集群搭建</title>
      <link href="2021/02/12/hadoop/"/>
      <url>2021/02/12/hadoop/</url>
      
        <content type="html"><![CDATA[<p>–<br>##</p>]]></content>
      
      
      
        <tags>
            
            <tag> hadoop </tag>
            
            <tag> 集群 </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github整合hexo搭建个人博客教程</title>
      <link href="2021/02/11/git-hexo/"/>
      <url>2021/02/11/git-hexo/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p>阔别hexo两年，在朋友的劝说下又重新拾捣了起来，面对早已遗忘的操作步骤和命令，一时间竟无从下手，幸而朋友的远程和视频手把手教学以及hexo官网的文档帮助（此处感谢@好基友 <a href="http://www.debug.cool/">ClanceyHuang</a>的帮助），才终于成功搭建成功。特此记录hexo的安装步骤以及和github整合的相关流程，以备不时之需！</p></blockquote><h2 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h4><p>安装hexo需要提前安装一下服务：</p><ul><li><a href="http://nodejs.org/">Node.js</a> (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</li><li><a href="http://git-scm.com/">Git</a></li></ul><h4 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h4><p>所有必备的应用程序安装完成后，即可使用npm安装hexo</p><pre class="line-numbers language-none"><code class="language-none">npm install -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="版本限制"><a href="#版本限制" class="headerlink" title="版本限制"></a>版本限制</h5><p>官网建议永远安装最新版本的hexo，以及推荐的Node.js版本，详见下表格（资料来源于官网：<a href="https://hexo.io)/">https://hexo.io）</a></p><table><thead><tr><th align="left">Hexo 版本</th><th align="left">最低兼容 Node.js 版本</th></tr></thead><tbody><tr><td align="left">5.0+</td><td align="left">10.13.0</td></tr><tr><td align="left">4.1 - 4.2</td><td align="left">8.10</td></tr><tr><td align="left">4.0</td><td align="left">8.6</td></tr><tr><td align="left">3.3 - 3.9</td><td align="left">6.9</td></tr><tr><td align="left">3.2 - 3.3</td><td align="left">0.12</td></tr><tr><td align="left">3.0 - 3.1</td><td align="left">0.10 or iojs</td></tr><tr><td align="left">0.0.1 - 2.8</td><td align="left">0.10</td></tr></tbody></table><h3 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h3><h4 id="初始化hexo项目"><a href="#初始化hexo项目" class="headerlink" title="初始化hexo项目"></a>初始化hexo项目</h4><p>安装hexo后，执行以下命令，hexo将会在指定文件夹中新建所需要的文件</p><pre class="line-numbers language-none"><code class="language-none">hexo init &lt;floder&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>新建完成后，指定文件夹的目录如下：</p><pre class="line-numbers language-none"><code class="language-none">.├── _config.yml     ├── package.json     ├── scaffolds       ├── source          |   ├── _drafts     |   └── _posts       └── themes           <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="构建github项目"><a href="#构建github项目" class="headerlink" title="构建github项目"></a>构建github项目</h4><ul><li><p>新建个人博客项目，项目名按照<username>.github.io格式，<username>为github上的用户名，且该项目需要设置为public，因为需要发布供访问静态页面，该静态页面由源博客项目解析而成。</p></li><li><p>新建博客源项目，用于存放原始的博客数据，项目名可自定义，此处以<source_blog>为名，该项目设为私有仓库。</p></li></ul><p>如下：<br><img src="/data_img/git-hexo/blog_project.png" alt="blog_project" title="博客项目"></p><h4 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h4><h5 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h5><p>站点的配置信息</p><p>常见配置如下，详情参见官网：<a href="https://hexo.io/zh-cn/docs/configuration">https://hexo.io/zh-cn/docs/configuration</a> 配置</p><pre class="line-numbers language-none"><code class="language-none"># Sitetitle: Hatcher  #网站标题subtitle: &#39;&#39;    #网站副标题description: &#39;&#39; #网站描述keywords:       #网站关键词author: Hatcher #您的名字language: en    #网站使用的语言timezone: &#39;&#39;    #网站时区# URL网址## If your site is put in a subdirectory, set url as &#39;http:&#x2F;&#x2F;example.com&#x2F;child&#39; and root as &#39;&#x2F;child&#x2F;&#39;url: https:&#x2F;&#x2F;www.hatcher.liveroot: &#x2F;permalink: :year&#x2F;:month&#x2F;:day&#x2F;:title&#x2F;permalink_defaults:pretty_urls:  trailing_index: true # Set to false to remove trailing &#39;index.html&#39; from permalinks  trailing_html: true # Set to false to remove trailing &#39;.html&#39; from permalinks# Directory 目录source_dir: source #资源文件夹，这个文件夹用来存放内容。public_dir: public #公共文件夹，这个文件夹用于存放生成的站点文件。tag_dir: tags      #标签文件夹archive_dir: archives  #归档文件夹category_dir: categories  #分类文件夹code_dir: downloads&#x2F;code  #Include code 文件夹，source_dir 下的子目录i18n_dir: :lang  #国际化（i18n）文件夹skip_render:  #跳过指定文件的渲染。匹配到的文件将会被不做改动地复制到 public 目录中。您可使用 glob 表达式来匹配路径。# Writing 文章new_post_name: :title.md # 新文章的文件名称default_layout: post # 预设布局titlecase: false # 把标题转换为 title caseexternal_link:  enable: true # 在新标签中打开链接  field: site # 对整个网站（site）生效或仅对文章（post）生效  exclude: &#39;&#39; #需要排除的域名。主域名和子域名如 www 需分别配置filename_case: 0 # 把文件名称转换为 (1) 小写或 (2) 大写render_drafts: false #显示草稿post_asset_folder: false #启用Assert文件夹relative_link: false #把链接改为与根目录的相对位址future: true #显示未来的文章# Home page setting# path: Root path for your blogs index page. (default &#x3D; &#39;&#39;)# per_page: Posts displayed per page. (0 &#x3D; disable pagination)# order_by: Posts order. (Order by date descending by default)index_generator:  path: &#39;&#39;  per_page: 10  order_by: -date# 分类&amp;标签default_category: uncategorizedcategory_map: #分类别名tag_map: #标签别名# Metadata elements## https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;HTML&#x2F;Element&#x2F;metameta_generator: true# Date &#x2F; Time format## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http:&#x2F;&#x2F;momentjs.com&#x2F;docs&#x2F;#&#x2F;displaying&#x2F;format&#x2F;date_format: YYYY-MM-DDtime_format: HH:mm:ss## updated_option supports &#39;mtime&#39;, &#39;date&#39;, &#39;empty&#39;updated_option: &#39;mtime&#39;# Pagination## Set per_page to 0 to disable paginationper_page: 10pagination_dir: page# 包括或不包括目录和文件## include:&#x2F;exclude: options only apply to the &#39;source&#x2F;&#39; folderinclude:exclude:ignore:# 主题## Plugins: https:&#x2F;&#x2F;hexo.io&#x2F;plugins&#x2F;## Themes: https:&#x2F;&#x2F;hexo.io&#x2F;themes&#x2F;theme: pure# 部署## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;one-command-deploymentdeploy:  ## 部署类型   type: git  ## 指定解析的博客仓库  repository:   ## 仓库分支  branch: ##代码块的高亮配置，启用了prism插件需要关键原生的highlight配置，启动prismjs.enable配置highlight:  enable: false  line_number: true  auto_detect: false  tab_replace: &#39;&#39;  wrap: true  hljs: falseprismjs:  enable: false   preprocess: true  line_number: true  tab_replace: &#39;&#39;prism_plugin:  mode: &#39;preprocess&#39; # realtime&#x2F;preprocess  theme: &#39;synthwave84&#39; # 代码快的主题，详情参见https:&#x2F;&#x2F;github.com&#x2F;PrismJS&#x2F;prism-themes#available-themes  line_number: true # 是否显示行号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h5><p>应用程序的信息</p><pre class="line-numbers language-none"><code class="language-none">&#123;  &quot;name&quot;: &quot;hexo-site&quot;,  &quot;version&quot;: &quot;0.0.0&quot;,  &quot;private&quot;: true,  &quot;scripts&quot;: &#123;    &quot;build&quot;: &quot;hexo generate&quot;,    &quot;clean&quot;: &quot;hexo clean&quot;,    &quot;deploy&quot;: &quot;hexo deploy&quot;,    &quot;server&quot;: &quot;hexo server&quot;,    &quot;public&quot;: &quot;hexo clean &amp;&amp; hexo g &amp;&amp; hexo d&quot;  &#125;,  &quot;hexo&quot;: &#123;    &quot;version&quot;: &quot;5.3.0&quot;  &#125;,  &quot;dependencies&quot;: &#123;    &quot;hexo&quot;: &quot;^5.3.0&quot;,    &quot;hexo-asset-image&quot;: &quot;^1.0.0&quot;,    &quot;hexo-deployer-git&quot;: &quot;^2.1.0&quot;,    &quot;hexo-filter-mermaid-diagrams&quot;: &quot;^1.0.5&quot;,    &quot;hexo-fs&quot;: &quot;^2.0.1&quot;,    &quot;hexo-generator-archive&quot;: &quot;^1.0.0&quot;,    &quot;hexo-generator-category&quot;: &quot;^1.0.0&quot;,    &quot;hexo-generator-feed&quot;: &quot;^2.2.0&quot;,    &quot;hexo-generator-index&quot;: &quot;^1.0.0&quot;,    &quot;hexo-generator-json-content&quot;: &quot;^4.2.3&quot;,    &quot;hexo-generator-search&quot;: &quot;^2.4.0&quot;,    &quot;hexo-generator-sitemap&quot;: &quot;^2.0.0&quot;,    &quot;hexo-generator-tag&quot;: &quot;^1.0.0&quot;,    &quot;hexo-neat&quot;: &quot;^1.0.8&quot;,    &quot;hexo-permalink-pinyin&quot;: &quot;^1.1.0&quot;,    &quot;hexo-prism-plugin&quot;: &quot;^2.3.0&quot;,    &quot;hexo-renderer-ejs&quot;: &quot;^1.0.0&quot;,    &quot;hexo-renderer-marked&quot;: &quot;^3.3.0&quot;,    &quot;hexo-renderer-stylus&quot;: &quot;^2.0.0&quot;,    &quot;hexo-server&quot;: &quot;^2.0.0&quot;,    &quot;hexo-wordcount&quot;: &quot;^6.0.1&quot;  &#125;,  &quot;devDependencies&quot;: &#123;    &quot;hexo-renderer-jade&quot;: &quot;^0.4.1&quot;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="scaffolds"><a href="#scaffolds" class="headerlink" title="scaffolds"></a>scaffolds</h5><p><a href="https://hexo.io/zh-cn/docs/writing">模版</a> 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</p><p>Hexo的模板是指在新建的文章文件中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。</p><p>如下为默认的post配置，即每个新建的post文章里面则都会附加title和date信息。</p><pre class="line-numbers language-none"><code class="language-none">---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;tags:---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="source"><a href="#source" class="headerlink" title="source"></a>source</h5><p>资源文件夹是存放用户资源的地方。除 <code>_posts</code> 文件夹之外，开头命名为 <code>_</code> (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 <code>public</code> 文件夹，而其他文件会被拷贝过去。</p><h5 id="themes"><a href="#themes" class="headerlink" title="themes"></a>themes</h5><p><a href="https://hexo.io/zh-cn/docs/themes">主题</a> 文件夹。Hexo 会根据主题来生成静态页面。</p><p>主题详情可以参考：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p><h6 id="示例主题配置"><a href="#示例主题配置" class="headerlink" title="示例主题配置"></a>示例主题配置</h6><p>以 <a href="https://github.com/cofess/hexo-theme-pure">pure主题</a> 为例，详情见：<a href="https://github.com/cofess/hexo-theme-pure">https://github.com/cofess/hexo-theme-pure</a></p><ul><li><p>安装主题</p><pre class="line-numbers language-none"><code class="language-none">git clone https:&#x2F;&#x2F;github.com&#x2F;cofess&#x2F;hexo-theme-pure.git themes&#x2F;pure<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>将从git上的拉取下来的代码复制到themes目录下，并在配置文件中设置theme配置项为主题的工程名称</p></li><li><p>主题配置文件：</p><p>在主题工程下，有一个_config.yml配置文件，可以配置一些网站的基础信息</p><pre class="line-numbers language-none"><code class="language-none"># 配置信息menu:  Home: .  Archives: archives  # 归档  Categories: categories  # 分类  Tags: tags  # 标签  Repository: repository  # github repositories#  Books: books  # 豆瓣书单  Links: links  # 友链  About: about  # 关于# Enable&#x2F;Disable menu iconsmenu_icons:  enable: true  # 是否启用导航菜单图标  home: icon-home-fill  archives: icon-archives-fill  categories: icon-folder  tags: icon-tags  repository: icon-project  books: icon-book-fill  links: icon-friendship  about: icon-cup-fill# rssrss: &#x2F;atom.xml# 网站site:  logo:    enabled: true    width: 40    height: 40    url: &#x2F;favicon.png#    url: ..&#x2F;images&#x2F;logo.png  title: Hatcher # 页面title  favicon: &#x2F;favicon.png  board: &lt;p&gt;欢迎交流与分享经验!&lt;&#x2F;p&gt; # 站点公告  copyright: true # 底部版权信息# 配置信息config:  skin: # 主题颜色 theme-black theme-blue theme-green theme-purple  layout: main-center # 布局方式 main-left main-center main-right  toc: true # 是否开启文章章节目录导航  menu_highlight: false # 是否开启当前菜单高亮显示  thumbnail: false # enable posts thumbnail, options: true, false  excerpt_link: Read More# Paginationpagination:  number: false  prev:     alwayShow: true  next:    alwayShow: true# Sidebarsidebar: rightwidgets:  - board    - category  - tag  - tagcloud  - archive  - recent_posts# display widgets at the bottom of index pages (pagination &#x3D;&#x3D; 2)index_widgets:# - category# - tagcloud# - archive  # widget behaviorarchive_type: &#39;monthly&#39;show_count: true# Fancyboxfancybox: false# Searchsearch:  insight: true # you need to install &#96;hexo-generator-json-content&#96; before using Insight Search  baidu: false # you need to disable other search engines to use Baidu search# Donatedonate:  enable: false  # 微信打赏  wechatpay:    qrcode: images&#x2F;donate&#x2F;wechatpayimg.png    title: 微信支付  # 支付宝打赏  alipay:     qrcode: images&#x2F;donate&#x2F;alipayimg.png     title: 支付宝# Share# weibo,qq,qzone,wechat,tencent,douban,diandian,facebook,twitter,google,linkedinshare:  enable: true  # 是否启用分享  sites: weibo,qq,wechat,facebook,twitter  # PC端显示的分享图标  mobile_sites: weibo,qq,qzone  # 移动端显示的分享图标# Githubgithub:   username: xiehqing  # github username# 评论系统# Gitment# Introduction: https:&#x2F;&#x2F;imsun.net&#x2F;posts&#x2F;gitment-introduction&#x2F;comment:  type: valine  # 启用哪种评论系统  disqus:  # enter disqus shortname here  youyan:     uid: 1783844 # enter youyan uid   livere:    uid: # enter youyan uid   gitment:    githubID:     repo:     ClientID:     ClientSecret:     lazy: false  gitalk: # gitalk. https:&#x2F;&#x2F;gitalk.github.io&#x2F;    owner:  #必须. GitHub repository 所有者，可以是个人或者组织。    admin:  #必须. GitHub repository 的所有者和合作者 (对这个 repository 有写权限的用户)。    repo:  #必须. GitHub repository.    ClientID:  #必须. GitHub Application Client ID.    ClientSecret:  #必须. GitHub Application Client Secret.  valine: # Valine. https:&#x2F;&#x2F;valine.js.org    appid:  # your leancloud application appid    appkey:  # your leancloud application appkey    notify: false # mail notifier , https:&#x2F;&#x2F;github.com&#x2F;xCss&#x2F;Valine&#x2F;wiki    verify: false # Verification code    placeholder: Just go go # comment box placeholder    avatar: mm # gravatar style    meta: nick,mail,link # custom comment header    pageSize: 10 # pagination size    visitor: false # Article reading statistic https:&#x2F;&#x2F;valine.js.org&#x2F;visitor.html# douban 豆瓣书单# Api：  # https:&#x2F;&#x2F;developers.douban.com&#x2F;wiki&#x2F;?title&#x3D;book_v2 图书  # https:&#x2F;&#x2F;developers.douban.com&#x2F;wiki&#x2F;?title&#x3D;movie_v2 电影# books：    # https:&#x2F;&#x2F;api.douban.com&#x2F;v2&#x2F;book&#x2F;user&#x2F;:name&#x2F;collections?start&#x3D;0&amp;count&#x3D;100 个人书单列表# movies:   # https:&#x2F;&#x2F;api.douban.com&#x2F;v2&#x2F;movie&#x2F;in_theaters 正在上映的电影  # https:&#x2F;&#x2F;api.douban.com&#x2F;v2&#x2F;movie&#x2F;coming_soon 即将上映的电影  # https:&#x2F;&#x2F;api.douban.com&#x2F;v2&#x2F;movie&#x2F;subject&#x2F;:id 单个电影信息  # https:&#x2F;&#x2F;api.douban.com&#x2F;v2&#x2F;movie&#x2F;search?q&#x3D;&#123;text&#125; 电影搜索douban:  user: # 豆瓣用户名  start: 0 # 从哪一条记录开始  count: 100 # 获取豆瓣书单数据条数  # PVpv:  busuanzi:    enable: false  # 不蒜子统计  leancloud:    enable: false  # leancloud统计    app_id: # leancloud &lt;AppID&gt;    app_key: # leancloud &lt;AppKey&gt;        # 统计postCount:  enable: false  wordcount: true  # 文章字数统计  min2read: true  # 阅读时长预计 # Pluginsplugins:  google_analytics: # enter the tracking ID for your Google Analytics  google_site_verification: # enter Google site verification code  baidu_analytics: # enter Baidu Analytics hash key  tencent_analytics:   # Miscellaneoustwitter:google_plus:fb_admins:fb_app_id:    # profileprofile:  enabled: true # Whether to show profile bar  avatar: images&#x2F;avatar.jpg  gravatar: # Gravatar email address, if you enable Gravatar, your avatar config will be overriden  author: Hatcher  author_title: Java Developer  author_description: 个人简介。  location: Shanghai, China  follow: https:&#x2F;&#x2F;github.com&#x2F;xiehaiqing  # Social Links  social:    links:      github: https:&#x2F;&#x2F;github.com&#x2F;cofess      weibo: http:&#x2F;&#x2F;weibo.com&#x2F;cofess      twitter: https:&#x2F;&#x2F;twitter.com&#x2F;iwebued      # facebook: &#x2F;      # dribbble: &#x2F;      behance: https:&#x2F;&#x2F;www.behance.net&#x2F;cofess      rss: atom.xml    link_tooltip: true # enable the social link tooltip, options: true, false  # My Skills   skills:    Git: ★★★☆☆    Gulp: ★★★☆☆    Javascript: ★★★☆☆    HTML+CSS: ★★★☆☆    Bootstrap: ★★★☆☆    ThinkPHP: ★★★☆☆    平面设计: ★★★☆☆  # My Personal Links  links:    Github: https:&#x2F;&#x2F;github.com&#x2F;cofess    Blog: http:&#x2F;&#x2F;blog.cofess.com    微博: http:&#x2F;&#x2F;weibo.com&#x2F;cofess    花瓣: http:&#x2F;&#x2F;huaban.com&#x2F;cofess    Behance: https:&#x2F;&#x2F;www.behance.net&#x2F;cofess  # My Personal Labels  labels:    - 前端    - 前端开发    - 前端重构    - Web前端    - 网页重构  # My Personal Works  works:    项目名:      link: http:&#x2F;&#x2F;www.example.com      date: 2016  # My Personal Projects  projects:    中文: https:&#x2F;&#x2F;github.com&#x2F;cofess&#x2F;gulp-startpro    cofess&#x2F;hexo-theme-pure: https:&#x2F;&#x2F;github.com&#x2F;cofess&#x2F;hexo-theme-pure<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a>操作命令</h4><p>详情见官网：<a href="https://hexo.io/zh-cn/docs/commands%EF%BC%8C%E4%BB%A5%E4%B8%8B%E8%B4%B4%E5%87%BA%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4">https://hexo.io/zh-cn/docs/commands，以下贴出常用命令</a></p><p>进入工程所在目录下：</p><ul><li><p>工程构建</p><pre class="line-numbers language-none"><code class="language-none">npm install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>生成静态文件</p><pre class="line-numbers language-none"><code class="language-none">hexo generate || hexo g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p><pre class="line-numbers language-none"><code class="language-none">hexo server || hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th align="left">选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-p</code>, <code>--port</code></td><td align="left">重设端口</td></tr><tr><td align="left"><code>-s</code>, <code>--static</code></td><td align="left">只使用静态文件</td></tr><tr><td align="left"><code>-l</code>, <code>--log</code></td><td align="left">启动日记记录，使用覆盖记录格式</td></tr></tbody></table></li><li><p>部署网站</p><pre class="line-numbers language-none"><code class="language-none">hexo deploy || hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p><pre class="line-numbers language-none"><code class="language-none">hexo clean<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>新建一篇文章</p><pre class="line-numbers language-none"><code class="language-none">hexo new [layout] &lt;title&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-p</code>, <code>--path</code></td><td align="left">自定义新文章的路径</td></tr><tr><td align="left"><code>-r</code>, <code>--replace</code></td><td align="left">如果存在同名文章，将其替换</td></tr><tr><td align="left"><code>-s</code>, <code>--slug</code></td><td align="left">文章的 Slug，作为新文章的文件名和发布后的 URL</td></tr></tbody></table></li></ul><h4 id="CNAME配置"><a href="#CNAME配置" class="headerlink" title="CNAME配置"></a>CNAME配置</h4><p>在根目录的source目录下新建CNAME文件，填写解析的域名，即可关联到自己的域名上</p>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/02/10/hello-world/"/>
      <url>2021/02/10/hello-world/</url>
      
        <content type="html"><![CDATA[<hr><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new &quot;My New Post&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
